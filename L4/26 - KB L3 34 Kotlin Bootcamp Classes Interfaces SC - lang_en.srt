1
00:00:00,000 --> 00:00:02,924
Different types of fish have lots in common,

2
00:00:02,924 --> 00:00:04,875
and they do similar things,

3
00:00:04,875 --> 00:00:07,134
in somewhat different ways.

4
00:00:07,134 --> 00:00:10,564
For example, all fish have a color,

5
00:00:10,564 --> 00:00:13,024
and all fish have to eat.

6
00:00:13,025 --> 00:00:18,774
So, we want to make sure that all our fish that we create do that.

7
00:00:18,774 --> 00:00:21,434
Kotlin offers two ways of doing that.

8
00:00:21,434 --> 00:00:23,734
One is abstract classes,

9
00:00:23,734 --> 00:00:26,009
and one is interfaces.

10
00:00:26,010 --> 00:00:30,400
Both are classes that cannot be instantiated on their own,

11
00:00:30,399 --> 00:00:34,649
which means you cannot create objects of those types yet.

12
00:00:34,649 --> 00:00:37,869
The difference is that abstract classes have

13
00:00:37,869 --> 00:00:43,195
constructors while Interfaces can't have any constructor logic.

14
00:00:43,195 --> 00:00:48,310
In aquarium fish, let's make a very simple abstract class.

15
00:00:48,310 --> 00:00:53,815
Aquarium fish; abstract classes start with the abstract keyword.

16
00:00:53,814 --> 00:00:56,244
Because aquarium fish is abstract,

17
00:00:56,244 --> 00:00:59,604
we can't make instances of aquarium fish directly.

18
00:00:59,604 --> 00:01:04,479
We need to provide sub classes that implement its missing functionality.

19
00:01:04,480 --> 00:01:07,103
Let's create two sub classes;

20
00:01:07,103 --> 00:01:13,400
shark and plecostomus, and make them inherit from aquarium fish.

21
00:01:13,400 --> 00:01:15,734
This leaves us with errors,

22
00:01:15,734 --> 00:01:19,605
because we have to implement the abstract property color.

23
00:01:19,605 --> 00:01:23,965
So let's add, that sharks are of color gray,

24
00:01:23,965 --> 00:01:27,010
and plecos are of color gold.

25
00:01:27,010 --> 00:01:30,995
And then, we can use it like any other class.

26
00:01:30,995 --> 00:01:32,795
Let's add a function,

27
00:01:32,795 --> 00:01:35,155
make fish to the main file.

28
00:01:35,155 --> 00:01:39,409
This function creates a shark and a pleco,

29
00:01:39,409 --> 00:01:41,535
and prints out their colors.

30
00:01:41,534 --> 00:01:43,575
Let's call it in main.

31
00:01:43,575 --> 00:01:47,200
When we run it with all the other stuff,

32
00:01:47,200 --> 00:01:50,960
we get the new fish and they print their color.

33
00:01:50,959 --> 00:01:53,894
Next, in aquarium fish,

34
00:01:53,894 --> 00:01:55,839
let's add an interface,

35
00:01:55,840 --> 00:01:59,340
fish action, that defines an eat function.

36
00:01:59,340 --> 00:02:02,930
Let's update our sharks and pleco classes.

37
00:02:02,930 --> 00:02:07,515
Add a comma, and then the fish action interface.

38
00:02:07,515 --> 00:02:09,659
Implement eat.

39
00:02:09,659 --> 00:02:12,939
Here are the finished classes.

40
00:02:14,180 --> 00:02:16,480
Add code to make fish,

41
00:02:16,479 --> 00:02:18,204
to make the fish eat.

42
00:02:18,205 --> 00:02:21,405
A final thing that you can do in Kotlin,

43
00:02:21,405 --> 00:02:24,680
when using classes that implement interfaces,

44
00:02:24,680 --> 00:02:28,379
is create objects where you specify that

45
00:02:28,379 --> 00:02:32,819
the only thing you can do with them is what's defined in the interface.

46
00:02:32,819 --> 00:02:36,549
Let's say, we want to make a function ''feed fish'',

47
00:02:36,550 --> 00:02:39,600
and when a fish gets the food, it eats it.

48
00:02:39,599 --> 00:02:42,269
We don't care what kind of fish it is,

49
00:02:42,270 --> 00:02:44,480
as long as it can eat the food.

50
00:02:44,479 --> 00:02:46,879
''Eat'' is defined in fish action,

51
00:02:46,879 --> 00:02:49,724
so every fish we passed to feed fish,

52
00:02:49,724 --> 00:02:52,049
needs to implement fish action.

53
00:02:52,050 --> 00:02:55,200
We don't care about any other properties.

54
00:02:55,199 --> 00:02:59,384
As long as it implements fish action, we can use it.

55
00:02:59,384 --> 00:03:02,759
We can specify that with our function parameter,

56
00:03:02,759 --> 00:03:05,489
by making it of tide fish action.

57
00:03:05,490 --> 00:03:12,000
Now, only fish that implement fish action can be passed into ''feed fish''.

58
00:03:12,000 --> 00:03:15,508
Now, this is a simplistic example,

59
00:03:15,508 --> 00:03:18,144
but when you have a lot of classes,

60
00:03:18,145 --> 00:03:22,400
this can help you keep clearer and more organized.

61
00:03:22,400 --> 00:03:25,789
So, Sean is going to talk more about,

62
00:03:25,789 --> 00:03:29,014
what is the difference between abstract classes,

63
00:03:29,014 --> 00:03:33,134
and interfaces, and how to use them right.

64
00:03:33,134 --> 00:03:36,324
Thanks, Alex. There's really

65
00:03:36,324 --> 00:03:42,269
only one syntax difference in Kotlin between abstract classes and interfaces.

66
00:03:42,270 --> 00:03:48,155
Abstract classes can have constructors and interfaces cannot.

67
00:03:48,155 --> 00:03:53,640
Both interfaces and abstract classes can contain implementations of methods.

68
00:03:53,639 --> 00:03:57,679
On interfaces, we call them default implementations.

69
00:03:57,680 --> 00:04:02,469
The big difference really is in when and how you use them.

70
00:04:02,469 --> 00:04:06,060
Use an interface if you have a lot of methods

71
00:04:06,060 --> 00:04:09,944
and one or two default implementations, like this.

72
00:04:09,944 --> 00:04:15,079
Use an abstract class anytime you can't complete a class.

73
00:04:15,080 --> 00:04:18,665
For example, going back to our aquarium fish,

74
00:04:18,665 --> 00:04:22,260
and making all aquarium fish implement fish action,

75
00:04:22,259 --> 00:04:28,004
we can provide a default implementation for ''eat'' while leaving color abstract.

76
00:04:28,004 --> 00:04:32,540
That's because there isn't really a good default color for a fish.

77
00:04:32,540 --> 00:04:37,955
But really, column provides us a better tool for this than abstract classes.

78
00:04:37,954 --> 00:04:40,039
Interface delegation;

79
00:04:40,040 --> 00:04:45,410
interface delegation let's you add features to a class via composition.

80
00:04:45,410 --> 00:04:48,410
Composition is when you use an instance of

81
00:04:48,410 --> 00:04:52,990
another class as opposed to inheriting from it.

82
00:04:52,990 --> 00:04:55,960
Instead of requiring the caller's subclass,

83
00:04:55,959 --> 00:04:57,685
a giant abstract class,

84
00:04:57,685 --> 00:04:59,254
give them a small interface,

85
00:04:59,254 --> 00:05:03,064
and let them delegate those interfaces to an object.

86
00:05:03,064 --> 00:05:05,678
This sounds pretty abstract.

87
00:05:05,678 --> 00:05:08,625
How do we do composition?

88
00:05:08,625 --> 00:05:12,665
Let's define a new main function, to explore composition,

89
00:05:12,665 --> 00:05:18,095
and implement delegate to create a plecostomus and print its color and food.

90
00:05:18,095 --> 00:05:22,405
Let's start by breaking up aquarium fish into interfaces.

91
00:05:22,404 --> 00:05:24,894
Fish action, and fish color;

92
00:05:24,894 --> 00:05:26,875
fish action will let us eat,

93
00:05:26,875 --> 00:05:29,579
and fish color will give our fish a color.

94
00:05:29,579 --> 00:05:33,675
Now, update plecostomus, to implement both the fish action,

95
00:05:33,675 --> 00:05:35,694
and fish color interfaces.

96
00:05:35,694 --> 00:05:38,990
We can remove inheritance from aquarium fish

97
00:05:38,990 --> 00:05:42,155
because we get all the functionality from the interfaces,

98
00:05:42,154 --> 00:05:46,234
and we don't even have to change the code in the body of plecostomus.

99
00:05:46,235 --> 00:05:52,355
Next, let's use interface delegation to provide a color implementation.

100
00:05:52,355 --> 00:05:57,735
To do that, we need an object that knows how to provide a fish color.

101
00:05:57,735 --> 00:06:02,985
Let's make a basic object called gold color that implements fish color.

102
00:06:02,985 --> 00:06:05,889
All it does is say that its color is gold.

103
00:06:05,889 --> 00:06:09,454
It doesn't really make sense to make multiple instances of

104
00:06:09,454 --> 00:06:13,254
gold color as they would all do the exact same thing.

105
00:06:13,254 --> 00:06:16,100
Kotlin let's us declare a class where we can only have

106
00:06:16,100 --> 00:06:20,780
one instance by using the keyword ''object'' instead of ''class''.

107
00:06:20,779 --> 00:06:25,049
This will declare a class and make exactly one instance of it.

108
00:06:25,050 --> 00:06:28,220
The instance will be called gold color and there's

109
00:06:28,220 --> 00:06:32,150
no way to make another instance of this class but that's okay,

110
00:06:32,149 --> 00:06:33,724
we don't need to.

111
00:06:33,725 --> 00:06:36,200
If you're familiar with the Singleton pattern,

112
00:06:36,199 --> 00:06:38,795
this is how to implement it in Kotlin.

113
00:06:38,795 --> 00:06:42,509
We're all set to use interface delegation now.

114
00:06:42,509 --> 00:06:43,914
Back on our plecostomus,

115
00:06:43,915 --> 00:06:47,140
we say ''buy gold color'' next to fish color,

116
00:06:47,139 --> 00:06:49,389
and we remove the member variable.

117
00:06:49,389 --> 00:06:52,680
This means implement the interface fish color

118
00:06:52,680 --> 00:06:56,235
by deferring all calls to the object, gold color.

119
00:06:56,235 --> 00:06:59,720
So every time you call the color property on this class,

120
00:06:59,720 --> 00:07:05,170
it will actually call the color property on gold color, pretty neat, huh?

121
00:07:05,170 --> 00:07:09,935
Of course there are different colors of plecostomi in the world.

122
00:07:09,935 --> 00:07:12,959
So, we can make the fish color object

123
00:07:12,959 --> 00:07:17,564
a constructor parameter with a default value of gold color,

124
00:07:17,564 --> 00:07:22,904
and defer calls to the color property to whatever fish color we get passed in.

125
00:07:22,904 --> 00:07:26,969
So, for example, if we were passed in a red color,

126
00:07:26,970 --> 00:07:31,485
then fish color would be by red color and return red.

127
00:07:31,485 --> 00:07:34,889
Let's do one more example of this.

128
00:07:34,889 --> 00:07:35,939
All our eat methods,

129
00:07:35,939 --> 00:07:38,024
so far, have just print out the food.

130
00:07:38,024 --> 00:07:40,979
So, we can make a printing fish action.

131
00:07:40,980 --> 00:07:45,200
It takes a food as a parameter and implements fish action.

132
00:07:45,199 --> 00:07:49,139
We override eat, and instead of printing a fixed string,

133
00:07:49,139 --> 00:07:51,824
we print out whatever food we were passed.

134
00:07:51,824 --> 00:07:54,194
Since we have a member variable food,

135
00:07:54,194 --> 00:07:57,045
we can't make printing fish action an object.

136
00:07:57,045 --> 00:08:01,015
We want a different instance for each food that we pass in.

137
00:08:01,014 --> 00:08:03,219
An then in plecostomus,

138
00:08:03,220 --> 00:08:07,680
we can replace the overrided E with the delegation to fish action.

139
00:08:07,680 --> 00:08:10,845
And we don't need the curly braces anymore either.

140
00:08:10,845 --> 00:08:13,760
Now, our plecostumus doesn't have a body.

141
00:08:13,759 --> 00:08:17,349
All its overrides are handled by interface delegation.

142
00:08:17,350 --> 00:08:19,700
Here is the running code.

143
00:08:19,699 --> 00:08:23,224
Interface delegation is really powerful,

144
00:08:23,225 --> 00:08:26,580
and you should generally consider how to use it whenever you

145
00:08:26,579 --> 00:08:30,584
might use an abstract class in another language.

146
00:08:30,584 --> 00:08:34,449
It let's you use composition to plug-in behaviors.

147
00:08:34,450 --> 00:08:36,935
Instead of requiring a lot of sub classes,

148
00:08:36,934 --> 00:08:39,469
each specialized in a different way.

