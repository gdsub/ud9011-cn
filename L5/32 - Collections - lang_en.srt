1
00:00:00,000 --> 00:00:04,544
So, there's this classic and wholly overused interview question

2
00:00:04,544 --> 00:00:06,195
where you're given a piece of paper,

3
00:00:06,195 --> 00:00:08,005
or more modern, a laptop,

4
00:00:08,005 --> 00:00:12,630
and asked on the fly to reverse the elements of a list or array.

5
00:00:12,630 --> 00:00:15,420
The code looks something like this in most languages.

6
00:00:15,419 --> 00:00:19,789
You hand the list to a function that loops through the list and a second list,

7
00:00:19,789 --> 00:00:24,059
and adds at the index of the second list the elements of the first list at the size

8
00:00:24,059 --> 00:00:29,195
minus index and always remember the extra minus one to account for the zero with element.

9
00:00:29,195 --> 00:00:31,910
Okay, I'm out of breath.

10
00:00:31,910 --> 00:00:35,750
We can improve on this in Kotlin a bit by using down to to

11
00:00:35,750 --> 00:00:40,130
traverse the list from the end to the beginning instead of from the beginning to the end,

12
00:00:40,130 --> 00:00:43,085
and you's ''get'' to get the element.

13
00:00:43,085 --> 00:00:47,695
But it's still painful and the designers of Kotlin thought so, too.

14
00:00:47,695 --> 00:00:51,869
So, in Kotlin, we can just ask a list for it's reversed version.

15
00:00:51,869 --> 00:00:53,854
Note that the list is not mutable.

16
00:00:53,854 --> 00:00:55,564
Reverse returns a new list.

17
00:00:55,564 --> 00:00:58,399
This is just one example of where the Kotlin designers

18
00:00:58,399 --> 00:01:01,399
made it simple to do stuff that you do all the time,

19
00:01:01,399 --> 00:01:03,875
and that looks the same every time you do it.

20
00:01:03,875 --> 00:01:06,364
But let's get back to aquariums.

21
00:01:06,364 --> 00:01:09,780
Here's a list of symptoms that unhealthy fish can display.

22
00:01:09,780 --> 00:01:12,790
We called mutableListOf, this time.

23
00:01:12,790 --> 00:01:15,865
ListOf gives us a list that we can't change,

24
00:01:15,864 --> 00:01:19,454
but mutableList Of gives us a list that we can change,

25
00:01:19,454 --> 00:01:22,444
which means we'll be able to modify what's in the list.

26
00:01:22,444 --> 00:01:27,049
In Kotlin, it's important to know there's a ListOf and mutableListOf method.

27
00:01:27,049 --> 00:01:29,105
It's good style to prefer ListOf,

28
00:01:29,105 --> 00:01:31,850
but mutableListOf is there when you need it.

29
00:01:31,849 --> 00:01:36,324
Some other predefined functions you can use on lists are Contains,

30
00:01:36,325 --> 00:01:39,310
which tests whether an item is contained in the list,

31
00:01:39,310 --> 00:01:42,850
Sublist creates a sublist from the index that's

32
00:01:42,849 --> 00:01:48,594
the first argument to and excluding the index that's the second argument.

33
00:01:48,594 --> 00:01:51,539
You can do math on lists, for example,

34
00:01:51,540 --> 00:01:56,545
sum which not surprisingly will sum up all the values of the list.

35
00:01:56,545 --> 00:02:00,909
And if our list isn't something that Kotlin knows how to sum,

36
00:02:00,909 --> 00:02:03,194
we can help it out using sumBy.

37
00:02:03,194 --> 00:02:08,814
SumBy takes a lambda that specifies what property of the elements to summarize.

38
00:02:08,814 --> 00:02:13,829
The ''it'' is the default name for lambda arguments and here,

39
00:02:13,830 --> 00:02:17,830
it refers to each element of the list as it's traversed.

40
00:02:17,830 --> 00:02:19,665
There is a lot more.

41
00:02:19,664 --> 00:02:24,294
One way to see all of the available functionality is to create a list in IntelliJ',

42
00:02:24,294 --> 00:02:25,899
then add the dot,

43
00:02:25,900 --> 00:02:29,675
and check out the autocompletion options in the tool tip.

44
00:02:29,675 --> 00:02:31,760
This works for any object.

45
00:02:31,759 --> 00:02:33,715
Mapping is another useful thing.

46
00:02:33,715 --> 00:02:35,575
So, let's introduce it here.

47
00:02:35,574 --> 00:02:40,914
In Kotlin, you can map pretty much anything to anything else using mapOf.

48
00:02:40,914 --> 00:02:42,519
For a simple example,

49
00:02:42,520 --> 00:02:44,705
you could create a map that matches symptoms,

50
00:02:44,705 --> 00:02:48,300
the keys, and diseases of fish, the values.

51
00:02:48,300 --> 00:02:53,950
You can then retrieve the disease value based on the symptom key using ''get'',

52
00:02:53,949 --> 00:02:57,314
or even shorter angle brackets.

53
00:02:57,314 --> 00:03:03,579
One interesting thing is that we can specify what to do if a key, a symptom,

54
00:03:03,580 --> 00:03:05,110
is not found in the list,

55
00:03:05,110 --> 00:03:06,700
and provide a default value,

56
00:03:06,699 --> 00:03:10,000
a default disease with ''get'' or default.

57
00:03:10,000 --> 00:03:12,800
When no value is found for a supplied key,

58
00:03:12,800 --> 00:03:16,344
bloating, the default value is supplied in the second argument.

59
00:03:16,344 --> 00:03:19,210
"Sorry, I don't know" is then returned.

60
00:03:19,210 --> 00:03:22,420
If we need to do more than just return a value,

61
00:03:22,419 --> 00:03:25,375
we can use the getOrElse function.

62
00:03:25,375 --> 00:03:28,330
Instead of returning a simple default value,

63
00:03:28,330 --> 00:03:31,495
whatever code is between the curly braces is executed.

64
00:03:31,495 --> 00:03:34,569
This could be as fancy as, for example,

65
00:03:34,569 --> 00:03:37,889
finding a web page with a cure and returning it.

66
00:03:37,889 --> 00:03:42,544
Just like mutableListOf, you can also make a mutableMapOf.

67
00:03:42,544 --> 00:03:45,964
A mutableMap let's you put and remove items.

68
00:03:45,965 --> 00:03:50,125
Here, we make an inventory map that we can modify.

69
00:03:50,125 --> 00:03:55,444
Then we put three tank scrubbers into the inventory and remove the fish net.

70
00:03:55,444 --> 00:03:57,594
It's pretty easy to remember.

71
00:03:57,594 --> 00:04:01,615
ListOf and mapOf make immutable collections.

72
00:04:01,615 --> 00:04:04,590
That means you can add or remove elements.

73
00:04:04,590 --> 00:04:09,259
MutableListOf and mutableMapOf make collections you can modify.

74
00:04:09,259 --> 00:04:12,609
Immutable collections are particularly useful in

75
00:04:12,610 --> 00:04:14,800
a threaded environment where you might be in

76
00:04:14,800 --> 00:04:18,199
trouble if multiple threads touch the same collection.

