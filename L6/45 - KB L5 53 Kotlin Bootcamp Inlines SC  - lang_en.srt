1
00:00:00,000 --> 00:00:03,779
Kotlin provides a very powerful construct when

2
00:00:03,779 --> 00:00:07,619
working with higher order functions, Inline.

3
00:00:07,620 --> 00:00:11,629
Let's continue with our example function, myWith.

4
00:00:11,630 --> 00:00:16,185
It takes a string name and an extension, Lambda.

5
00:00:16,184 --> 00:00:19,049
In the body, it applies the extension,

6
00:00:19,050 --> 00:00:21,390
Lambda to the name,

7
00:00:21,390 --> 00:00:23,810
and we call it like this.

8
00:00:23,809 --> 00:00:28,909
Here, we're saying call myWith on fish.name,

9
00:00:28,910 --> 00:00:34,625
and we're parsing it a Lambda which we'll call capitalize on the name.

10
00:00:34,625 --> 00:00:37,274
There's one problem with this.

11
00:00:37,274 --> 00:00:40,054
Every time we call myWith,

12
00:00:40,054 --> 00:00:43,369
Kotlin will make a new Lambda object.

13
00:00:43,369 --> 00:00:47,179
Yes, Lambdas are objects.

14
00:00:47,179 --> 00:00:51,659
A Lambda expression is an instance of a function interface,

15
00:00:51,659 --> 00:00:55,474
which is itself a subtype of object.

16
00:00:55,475 --> 00:01:00,645
To help understand, we can write it out longhand like this.

17
00:01:00,645 --> 00:01:05,549
Creating an instance of function one every time myWith is called,

18
00:01:05,549 --> 00:01:08,250
takes CPU time and memory.

19
00:01:08,250 --> 00:01:11,000
This isn't a problem most of the time,

20
00:01:11,000 --> 00:01:13,969
but if we're defining something like myWith that we'll

21
00:01:13,969 --> 00:01:17,750
use everywhere or the Lambda is more complex,

22
00:01:17,750 --> 00:01:22,670
the overhead, that is the required resources, can add up.

23
00:01:22,670 --> 00:01:24,540
To fix this problem,

24
00:01:24,540 --> 00:01:28,725
Kotlin let's us define myWith as inLine.

25
00:01:28,724 --> 00:01:33,169
That is a promise that every time myWith is called,

26
00:01:33,170 --> 00:01:38,865
it will actually transform the source code to inLine, the function.

27
00:01:38,864 --> 00:01:43,219
That is, the compiler will change the code to

28
00:01:43,219 --> 00:01:47,515
replace the Lambda with the instructions inside the Lambda.

29
00:01:47,515 --> 00:01:49,665
That means zero overhead.

30
00:01:49,665 --> 00:01:54,445
Let's look at how. When the inLine transform is applied,

31
00:01:54,444 --> 00:02:00,714
the call to the Lambda is replaced with the contents of the function body of the Lambda.

32
00:02:00,715 --> 00:02:02,990
In our myWith example,

33
00:02:02,989 --> 00:02:05,009
when we apply the transform,

34
00:02:05,010 --> 00:02:09,444
capitalize is called directly on fish.name.

35
00:02:09,444 --> 00:02:11,555
This is really important.

36
00:02:11,555 --> 00:02:16,705
Kotlin let's us define Lambda-based APIs with zero overhead.

37
00:02:16,705 --> 00:02:23,115
It won't even pay the cost of calling the function myWith since it gets inlined.

38
00:02:23,115 --> 00:02:27,469
It's worth noting, inlining large functions does increase

39
00:02:27,469 --> 00:02:32,694
your code size so it's best used for simple functions like myWith.

40
00:02:32,694 --> 00:02:35,294
As a user of these APIs,

41
00:02:35,294 --> 00:02:38,464
we don't have to worry about creating extra objects;

42
00:02:38,465 --> 00:02:41,330
the compiler will take care of it for us.

